import random
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.ext import CallbackContext
from telegram.error import BadRequest

from constants import MODE_AUTOMATIC, MODE_MANUAL
from manual_settings import ManualSettings

from server import Server


def get_keyboard_using_instance(instance):
    if instance.mode == MODE_MANUAL:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data="update")],
            [
                InlineKeyboardButton(
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º ü§ñ",
                    callback_data="change_mode"
                )
            ],
            [
                InlineKeyboardButton(
                    "–ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä—Ç–æ—á–∫—É ‚ùå" if instance.settings.is_servo_on else "–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä—Ç–æ—á–∫—É ‚úÖ", callback_data="change_servo"
                ),
                InlineKeyboardButton("–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä üçÉ", callback_data="ventil")
            ]
        ])
    else:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üîÑ", callback_data="update")],
            [InlineKeyboardButton(
                "–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º üïπÔ∏è", callback_data="change_mode")]
        ])


def format_text_using_instance(instance):
    servo = instance.is_servo_on
    mode_text = "–†—É—á–Ω–æ–π" if instance.mode == MODE_MANUAL else "–£–º–Ω—ã–π"
    if instance.temperature_outside is None:
        temp_outside_text = '–ï—â–µ –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–∞'
    else:
        temp_outside_text = f'{instance.get_outside_temp()}¬∞C'
    if instance.temperature_inside is None:
        temp_inside_text = '–ï—â–µ –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–∞'
    else:
        temp_inside_text = f"{instance.get_inside_temp()}¬∞C"

    if instance.ventil_power is None:
        ventilator_text = "–ï—â–µ –Ω–µ –∏–∑–º–µ—Ä–µ–Ω..."
    else:
        ventilator_text = f'{instance.ventil_power}%'
        if instance.settings.ventil_power != instance.ventil_power:
            ventilator_text += " (–≤–æ—Ç-–≤–æ—Ç –ø–æ–º–µ–Ω—è–µ—Ç—Å—è!)"

    if servo:
        servo_text = '–û—Ç–∫—Ä—ã—Ç–∞'
        if instance.settings and not instance.settings.is_servo_on:
            servo_text = "–í–æ—Ç-–≤–æ—Ç –∑–∞–∫—Ä–æ–µ—Ç—Å—è!"
    else:
        servo_text = "–ó–∞–∫—Ä—ã—Ç–∞"
        if instance.settings and instance.settings.is_servo_on:
            servo_text = "–í–æ—Ç-–≤–æ—Ç –æ—Ç–∫—Ä–æ–µ—Ç—Å—è!"
    text = f"""üå±<b>–¢–µ–ø–ª–∏—Ü–∞ –°–ø–∞—Ä—Ç–∞–Ω–∞</b>
<i>–†–µ–∂–∏–º</i>: {mode_text}

üå°Ô∏è <i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–Ω–∞—Ä—É–∂–∏</i>: {temp_outside_text}
üå°Ô∏è <i>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω—É—Ç—Ä–∏</i>: {temp_inside_text}
üí® <i>–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä</i>: {ventilator_text}
ü™ü <i>–§–æ—Ä—Ç–æ—á–∫–∞</i>: {servo_text}
"""
    return text


def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    # send data about teplica: temperature, is ventilator on, is servo on
    instance = Server.get_instance()
    text = format_text_using_instance(instance)
    keyboard = get_keyboard_using_instance(instance)

    update.message.reply_text(
        text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    text = """–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–ø–ª–∏—Ü–µ–π —á–µ–ª–æ–≤–µ–∫–∞, –ø–æ –∏–º–µ–Ω–∏ <b>–°–ø–∞—Ä—Ç–∞–∫</b> üòä

–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–ª–∏—Ü—ã.
<i>–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–π.</i>
"""
    update.message.reply_text(text, parse_mode=ParseMode.HTML)


def change_mode_callback(update: Update, context: CallbackContext) -> None:
    instance = Server.get_instance()
    if instance.get_mode() == MODE_MANUAL:
        instance.set_mode(MODE_AUTOMATIC)
    else:
        instance.set_mode(MODE_MANUAL)
        instance.set_settings()
        instance.settings.ventil_power = 100
    update.callback_query.answer()
    text = format_text_using_instance(instance)
    keyboard = get_keyboard_using_instance(instance)
    update.callback_query.edit_message_text(
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


def ventil_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    query.message.reply_html(
        "<b>–û–∫–µ–π!</b>\n–í–≤–µ–¥–∏ —Å–∏–ª—É (0-100)üîå, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ö–æ—á–µ—à—å –∫—Ä—É—Ç–∏—Ç—å –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä."
    )


def ventil_text(update: Update, context: CallbackContext) -> None:
    # let's set 10 buttons here or something idk yet
    text = update.message.text
    if not text.isdigit():
        update.message.reply_html("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ!")
        return
    power = int(text)
    if power < 0 or power > 100:
        update.message.reply_html("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100!")
        return
    instance = Server.get_instance()
    instance.settings.ventil_power = power
    text = format_text_using_instance(instance)
    keyboard = get_keyboard_using_instance(instance)
    update.message.reply_html(
        text=text,
        reply_markup=keyboard
    )


def change_servo_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    instance = Server.get_instance()
    instance.settings.is_servo_on = not instance.settings.is_servo_on
    text = format_text_using_instance(instance)
    keyboard = get_keyboard_using_instance(instance)
    query.edit_message_text(
        text=text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )


def update_data_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    instance = Server.get_instance()
    text = format_text_using_instance(instance)
    keyboard = get_keyboard_using_instance(instance)
    try:
        query.edit_message_text(
            text=text, reply_markup=keyboard, parse_mode=ParseMode.HTML
        )
    except BadRequest:
        pass


def picture_handler(update: Update, context: CallbackContext) -> None:
    instance = Server.get_instance()
    pic_name = str(random.randint(10000, 99999))
    instance.create_picture(pic_name)
    update.message.reply_photo(
        photo=open(f'{pic_name}.png', 'rb')
    )

    # delete picture
    os.remove(f'{pic_name}.png')

    
    
